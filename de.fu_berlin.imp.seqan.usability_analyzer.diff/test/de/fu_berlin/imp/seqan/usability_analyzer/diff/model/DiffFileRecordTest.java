package de.fu_berlin.imp.seqan.usability_analyzer.diff.model;

import static org.hamcrest.Matchers.greaterThan;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import org.eclipse.core.runtime.NullProgressMonitor;
import org.jmock.Expectations;
import org.jmock.integration.junit4.JUnitRuleMockery;
import org.jmock.lib.concurrent.Synchroniser;
import org.jmock.lib.legacy.ClassImposteriser;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import de.fu_berlin.imp.seqan.usability_analyzer.core.model.dataresource.FileData;
import de.fu_berlin.imp.seqan.usability_analyzer.core.model.dataresource.IData;
import de.fu_berlin.imp.seqan.usability_analyzer.core.util.FileUtils;
import de.fu_berlin.imp.seqan.usability_analyzer.diff.util.DiffDataResourceUtils;
import de.fu_berlin.imp.seqan.usability_analyzer.diff.util.SourceCache;
import de.fu_berlin.imp.seqan.usability_analyzer.diff.util.SourceOrigin;

@RunWith(Parameterized.class)
public class DiffFileRecordTest {

	@Rule
	public JUnitRuleMockery context = new JUnitRuleMockery() {
		{
			setImposteriser(ClassImposteriser.INSTANCE);
			setThreadingPolicy(new Synchroniser());
		}
	};

	private static class ValidationPatch {
		private long start;
		private long end;
		private String patchStart;
		private String patchEnd;

		public ValidationPatch(long start, long end, String patchStart,
				String patchEnd) {
			this.start = start;
			this.end = end;
			this.patchStart = patchStart;
			this.patchEnd = patchEnd;
		}
	}

	private static final String root = "/"
			+ DiffFileRecordTest.class.getPackage().getName().replace('.', '/')
			+ "/..";

	@SuppressWarnings("serial")
	@Parameters
	public static List<Object[]> getParameters() throws URISyntaxException {
		return Arrays
				.asList(new Object[][] {
						{
								FileUtils
										.getFile(root
												+ "/diff/o6lmo5tpxvn3b6fg/o6lmo5tpxvn3b6fg_r00000048_2011-09-13T12-11-02+0200.diff"),
								new LinkedList<DiffFileRecordTest.ValidationPatch>() {
									{
										add(new ValidationPatch(
												997l,
												1681l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/bin/core/Win32/Debug/SeqAnCore/SeqAnCore.log	2011-09-13 12:10:14.578125000 +0200",
												"+Time Elapsed 00:00:00.28"));
										add(new ValidationPatch(
												2692l,
												3396l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/bin/extras/Win32/Debug/SeqAnExtras/SeqAnExtras.log	2011-09-13 12:10:14.484375000 +0200",
												"+Time Elapsed 00:00:00.23"));
										add(new ValidationPatch(
												5217l,
												12856l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/bin/sandbox/my_sandbox/apps/my_app/my_app.dir/Debug/my_app.log	2011-09-13 12:07:19.015625000 +0200",
												"+Time Elapsed 00:00:02.64"));
										add(new ValidationPatch(
												13935l,
												14752l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/bin/sandbox/my_sandbox/Win32/Debug/SeqAnSandboxMy_sandbox/SeqAnSandboxMy_sandbox.log	2011-09-13 12:10:14.468750000 +0200",
												"+Time Elapsed 00:00:00.26"));
										add(new ValidationPatch(
												15813l,
												16849l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/bin/Win32/Debug/seqan_instrumentation_build/seqan_instrumentation_build.log	2011-09-13 12:10:13.875000000 +0200",
												"-         [2] Diff files uploaded."));
										add(new ValidationPatch(
												17842l,
												18518l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/bin/Win32/Debug/ZERO_CHECK/ZERO_CHECK.log	2011-09-13 12:10:13.828125000 +0200",
												"+Time Elapsed 00:00:00.18"));
									}
								} },
						{
								FileUtils
										.getFile(root
												+ "/diff/blcdihoxu16s53yo/blcdihoxu16s53yo_r00000003_2011-09-13T10-28-07.diff"),
								new LinkedList<ValidationPatch>() {
									{
										add(new ValidationPatch(
												1052l,
												3374l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/cmake_install.cmake	2011-09-13 09:41:58.437500000 +0200",
												"-ENDFOREACH(file)"));
										add(new ValidationPatch(
												4446l,
												4736l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/CMakeFiles/cmake.check_cache	2011-09-13 10:09:18.640625000 +0200",
												"-# This file is generated by cmake for dependency checking of the CMakeCache.txt file"));
										add(new ValidationPatch(
												5814l,
												7666l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/CMakeFiles/CMakeCCompiler.cmake	2011-09-13 09:41:38.578125000 +0200",
												"\"C:/Programs/Programmieren/MinGW/lib/gcc/mingw32/4.4.0;C:/Programs/Programmieren/MinGW/lib/gcc;C:/Programs/Programmieren/MinGW/mingw32/lib;C:/Programs/Programmieren/MinGW/lib\")"));
										add(new ValidationPatch(
												8748l,
												10729l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/CMakeFiles/CMakeCXXCompiler.cmake	2011-09-13 09:41:41.031250000 +0200",
												"\"C:/Programs/Programmieren/MinGW/lib/gcc/mingw32/4.4.0;C:/Programs/Programmieren/MinGW/lib/gcc;C:/Programs/Programmieren/MinGW/mingw32/lib;C:/Programs/Programmieren/MinGW/lib\")"));
										add(new ValidationPatch(
												12141l,
												13321l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/CMakeFiles/CMakeDirectoryInformation.cmake	2011-09-13 09:41:58.437500000 +0200",
												"-SET(CMAKE_CXX_INCLUDE_REGEX_COMPLAIN ${CMAKE_C_INCLUDE_REGEX_COMPLAIN})"));
										add(new ValidationPatch(
												14387l,
												20977l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/CMakeFiles/CMakeError.log	2011-09-13 09:41:52.296875000 +0200",
												"-int main(){return 0;}\r\n-"));
										add(new ValidationPatch(
												22045l,
												55589l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/CMakeFiles/CMakeOutput.log	2011-09-13 09:41:50.171875000 +0200",
												"-        }\r\n-    "));
										add(new ValidationPatch(
												56665l,
												61816l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/CMakeFiles/CMakeRuleHashes.txt	2011-09-13 10:09:28.968750000 +0200",
												"-1cbdcd215eade25d29c6860e7cc784fa sandbox/tum/tests/CMakeFiles/sandbox_tum_tests"));
										add(new ValidationPatch(
												62888l,
												63472l,
												"--- ./misc/seqan_instrumentation/last_revision_copy/CMakeFiles/CMakeSystem.cmake	2011-09-13 09:41:29.421875000 +0200",
												"-SET(CMAKE_SYSTEM_LOADED 1)"));
									}
								} } });
	}

	private File underlayingDiffFile;
	private LinkedList<ValidationPatch> validationPatches;

	public DiffFileRecordTest(File underlayingDiffFile,
			LinkedList<ValidationPatch> validationPatches) {
		this.underlayingDiffFile = underlayingDiffFile;
		this.validationPatches = validationPatches;
	}

	@Test
	public void checkPatches() {
		for (ValidationPatch patch : validationPatches) {
			Assert.assertEquals(
					"The validation patch's start is not up-to-date!",
					patch.patchStart,
					new String(FileUtils.readBytesFromTo(underlayingDiffFile,
							patch.start,
							patch.start + patch.patchStart.length())));
			Assert.assertEquals(
					"The validation patch's end is not up-to-date!",
					patch.patchEnd,
					new String(FileUtils.readBytesFromTo(underlayingDiffFile,
							patch.end - patch.patchEnd.length(), patch.end)));
		}
	}

	@Test
	public void testGetPatch() throws URISyntaxException, IOException {
		final IData data = new FileData(null, underlayingDiffFile);

		final DiffDataResource diffDataResource = context
				.mock(DiffDataResource.class);
		final SourceOrigin sourceOrigin = context.mock(SourceOrigin.class);
		final SourceCache sourceCache = context.mock(SourceCache.class);
		context.checking(new Expectations() {
			{
				allowing(diffDataResource).getID();
				will(returnValue(null));

				allowing(diffDataResource).getRevision();
				will(returnValue(null));

				allowing(diffDataResource).getPrevDiffFile();
				will(returnValue(null));

				allowing(diffDataResource).getName();
				will(returnValue(underlayingDiffFile.getName()));

				allowing(diffDataResource).getLength();
				will(returnValue(underlayingDiffFile.length()));

				allowing(diffDataResource).iterator();
				will(returnValue(data.iterator()));

				// TODO
				// allowing(diffDataResource).getPath();
				// will(returnValue(underlayingDiffFile.getPath()));

				allowing(sourceOrigin).getOriginSourceFile(
						with(any(String.class)));
				will(returnValue(null));

				allowing(sourceCache).getCachedSourceFile(
						with(any(DiffDataResource.class)),
						with(any(String.class)));
				will(returnValue(null));

				// TEST
				// expectations are defined in patches
				for (ValidationPatch patch : validationPatches) {
					oneOf(diffDataResource).read(patch.start - 2, patch.start);
					will(returnValue(2));
					oneOf(diffDataResource).getContent(patch.start, patch.end);
					will(returnValue(null));
				}

				System.err.println(with(greaterThan(validationPatches
						.get(validationPatches.size() - 1).start)));

				// STOP checking
				// just accept all further getContent calls
				allowing(diffDataResource).getContent(with(any(Long.class)),
						with(any(Long.class)));
				will(returnValue(null));
			}
		});

		DiffDataResourceUtils.readRecords(diffDataResource, sourceOrigin,
				sourceCache, new NullProgressMonitor());
	}
}
